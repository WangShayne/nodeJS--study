# 学习计划

1.菜鸟nodeJS教程http://www.runoob.com/nodejs/nodejs-tutorial.html

2.从零开始nodeJS文章 http://blog.fens.me/series-nodejs/

3.express in action PDF

4.79px网站仿写

### 菜鸟nodeJS 笔记

#### Package.json 属性说明
  *  name - 包名。
  *  version - 包的版本号。
  *  description - 包的描述。
  *  homepage - 包的官网 url 。
  *  author - 包的作者姓名。
  *  contributors - 包的其他贡献者姓名。
  *  dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。
  *  repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。
  *  main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require("express")。
  *  keywords - 关键字

#### http模块
```
  runoob-nodeJS/http
```
  * require 引入模块
  ```js
  var http = require("http");
  ```
  * http.creatServer()方法创建服务器
  ```js
  http.creatServer(function(request,response){
    response.writeHead(200,{"Content-Type":"text/plain"});
    response.end("返回状态200,title为text/palin")
  }).listen(3000);  //监听3000端口
  console.log("服务器运行在3000端口")
  ```
  * nodeJS执行代码
  ```js
    node index.js

    "服务器运行在3000端口"
  ```
  * 访问http://127.0.0.1:3000

  页面展示为 *返回状态200,title为text/palin*

  ##### 分析
  1 require 引入node的模块http

  2  调用http的creatHttp服务,这个函数返回一个包含listen的对象,listen可制定监听的端口号

#### 回调函数
```
  runoob-nodeJS/callback
```

** 回调函数在完成任务后就会被调用 **

例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。



#### 路由
```
  runoob-nodeJS/router
```
---

### 从零开始nodeJS
#### Node.js开发框架Express4.x
```
  from0/express
```
###### 启动项目
```
npm install -g express-generator@4   //全局安装express
express -e 项目名称    // -e : 使用ejs模板
cd . && npm install    //进入目录  安装依赖插件
npm start // 启动项目
访问  http://localhost:3000  可以看到 Express Welcome to Express
```

##### 目录结构分析
  *bin* --- 存放启动项目的脚本文件

  *node_module* --- 存放所有的项目依赖库

  *public* --- 静态资源存放目录

  *routes* --- 路由文件

  *views* --- 视图文件(ejs模板)

  *package.json* --- 项目依赖配置及开发者信息

  *app.js* --- 核心配置文件

##### app.js核心文件
```js
//引入express
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

//配置路由
var routes = require('./routes/index');
var users = require('./routes/users');

//创建express实例
var app = express();

// 定义模板
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// 项目图标
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
// 定义日志输出级别
app.use(logger('dev'));
// 定义数据格式
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
// 定义cookie解析设置
app.use(cookieParser());
// 定义静态资源存放目录
app.use(express.static(path.join(__dirname, 'public')));

// 匹配路由路径
app.use('/', routes);
app.use('/users', users);

// 404页面处理
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// 开发环境，500错误处理和错误堆栈跟踪
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// 生产环境500错误处理
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});


module.exports = app;

```

##### ./bin/www文件

```js
#!/usr/bin/env node

/**
 * 依赖加载
 */

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');

/**
 * 定义启动端口
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * 创建服务器实例
 */

var server = http.createServer(app);

/**
 * 监听端口
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 端口标准化函数
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * HTTP异常事件处理函数
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * 事件绑定函数
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

```

##### bower控制js依赖管理
bower依赖git
bower依赖git
bower依赖git
```
npm install bower -g
bower install  包名
```

##### ejs模板使用
 ```
<%= code %>
<%- include filename %> //加载其他文件
 ```
header.ejs, 为页面的头部区域

<%- include header.ejs %>

index.ejs, 为内容显示区域

<%- include footer.ejs %>

footer.ejs，为页面底部区域

##### 路由
